<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CDUTCL</title>
  
  <subtitle>cdutcl@gmail.com</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.cdutcl.com/"/>
  <updated>2020-03-14T13:10:18.205Z</updated>
  <id>https://www.cdutcl.com/</id>
  
  <author>
    <name>cdutcl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu18.04安装中文支持</title>
    <link href="https://www.cdutcl.com/posts/87fd19ae/"/>
    <id>https://www.cdutcl.com/posts/87fd19ae/</id>
    <published>2020-03-09T10:59:58.000Z</published>
    <updated>2020-03-14T13:10:18.205Z</updated>
    
    <content type="html"><![CDATA[<p>本来主要描述Ubuntu18.04系统中，安装中文支持的方法，内容主要参考网络文章，自己尝试后编辑成文。</p><a id="more"></a><p>原文链接：<a href="https://blog.csdn.net/AsynSpace/article/details/86293500" target="_blank" rel="noopener">https://blog.csdn.net/AsynSpace/article/details/86293500</a></p><p>安装之前，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$LANG</span></span><br></pre></td></tr></table></figure><p>查看语言环境  </p><p>安装中文语言包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install  language-pack-zh-han*</span><br></pre></td></tr></table></figure><p>修改配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/default/locale</span><br></pre></td></tr></table></figure><p>将原始内容注释或删除掉，替换为如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">LANG=<span class="string">"zh_CN.UTF-8"</span></span><br><span class="line">LANGUAGE=<span class="string">"zh_CN:zh"</span></span><br><span class="line">LC_NUMERIC=<span class="string">"zh_CN"</span></span><br><span class="line">LC_TIME=<span class="string">"zh_CN"</span></span><br><span class="line">LC_MONETARY=<span class="string">"zh_CN"</span></span><br><span class="line">LC_PAPER=<span class="string">"zh_CN"</span></span><br><span class="line">LC_NAME=<span class="string">"zh_CN"</span></span><br><span class="line">LC_ADDRESS=<span class="string">"zh_CN"</span></span><br><span class="line">LC_TELEPHONE=<span class="string">"zh_CN"</span></span><br><span class="line">LC_MEASUREMENT=<span class="string">"zh_CN"</span></span><br><span class="line">LC_IDENTIFICATION=<span class="string">"zh_CN"</span></span><br><span class="line">LC_ALL=<span class="string">"zh_CN.UTF-8"</span></span><br></pre></td></tr></table></figure><p>修改环境文件：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/environment</span><br></pre></td></tr></table></figure><p>不修改原有内容，直接在原有内容下面添加内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">LANG=<span class="string">"zh_CN.UTF-8"</span></span><br><span class="line">LANGUAGE=<span class="string">"zh_CN:zh"</span></span><br><span class="line">LC_NUMERIC=<span class="string">"zh_CN"</span></span><br><span class="line">LC_TIME=<span class="string">"zh_CN"</span></span><br><span class="line">LC_MONETARY=<span class="string">"zh_CN"</span></span><br><span class="line">LC_PAPER=<span class="string">"zh_CN"</span></span><br><span class="line">LC_NAME=<span class="string">"zh_CN"</span></span><br><span class="line">LC_ADDRESS=<span class="string">"zh_CN"</span></span><br><span class="line">LC_TELEPHONE=<span class="string">"zh_CN"</span></span><br><span class="line">LC_MEASUREMENT=<span class="string">"zh_CN"</span></span><br><span class="line">LC_IDENTIFICATION=<span class="string">"zh_CN"</span></span><br><span class="line">LC_ALL=<span class="string">"zh_CN.UTF-8"</span></span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本来主要描述Ubuntu18.04系统中，安装中文支持的方法，内容主要参考网络文章，自己尝试后编辑成文。&lt;/p&gt;
    
    </summary>
    
    
      <category term="LINUX" scheme="https://www.cdutcl.com/categories/LINUX/"/>
    
    
      <category term="LINUX" scheme="https://www.cdutcl.com/tags/LINUX/"/>
    
      <category term="Ubuntu" scheme="https://www.cdutcl.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>常用电平标准汇总(TTL/LVTTL/CMOS/LVCOMS)</title>
    <link href="https://www.cdutcl.com/posts/68515062/"/>
    <id>https://www.cdutcl.com/posts/68515062/</id>
    <published>2020-03-06T10:23:26.000Z</published>
    <updated>2020-03-16T14:00:25.228Z</updated>
    
    <content type="html"><![CDATA[<p>汇总常用电平标准。  </p><a id="more"></a><hr><h2 id="1-TTL"><a href="#1-TTL" class="headerlink" title="1. TTL"></a>1. TTL</h2><p>TTL(Transistor-Transistor Logic)三极管结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">VCC: 5V</span><br><span class="line">VOH: &gt;&#x3D;2.4V     VIH: &gt;&#x3D;2.0V</span><br><span class="line">VOL: &lt;&#x3D;0.5V     VIL: &lt;&#x3D;0.8V</span><br></pre></td></tr></table></figure><hr><h2 id="2-LVTTL"><a href="#2-LVTTL" class="headerlink" title="2. LVTTL"></a>2. LVTTL</h2><p>LVTTL(Low-Voltage TTL)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3.3V LVTTL:     VCC: 3.3V</span><br><span class="line">VOH: &gt;&#x3D;2.4V     VIH: &gt;&#x3D;2.0V</span><br><span class="line">VOL: &lt;&#x3D;0.4V     VIL: &lt;&#x3D;0.8V</span><br><span class="line">  </span><br><span class="line">2.5V LVTTL:     VCC: 2.5V</span><br><span class="line">VOH: &gt;&#x3D;2.0V     VIH: &gt;&#x3D;1.7V</span><br><span class="line">VOL: &lt;&#x3D;0.2V     VIL: &lt;&#x3D;0.7V</span><br></pre></td></tr></table></figure><hr><h2 id="3-CMOS"><a href="#3-CMOS" class="headerlink" title="3. CMOS"></a>3. CMOS</h2><p>CMOS(Complementary Metal Oxide Semiconductor)互补金属氧化物半导体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">VCC: 5V</span><br><span class="line">VOH: &gt;&#x3D;4.45V    VIH: &gt;&#x3D;3.5V</span><br><span class="line">VOL: &lt;&#x3D;0.5V     VIL: &lt;&#x3D;1.5V</span><br></pre></td></tr></table></figure><hr><h2 id="4-LVCMOS"><a href="#4-LVCMOS" class="headerlink" title="4. LVCMOS"></a>4. LVCMOS</h2><p>LVCMOS(Low-Voltage CMOS)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3.3V LVCMOS:     VCC: 3.3V</span><br><span class="line">VOH: &gt;&#x3D;3.2V     VIH: &gt;&#x3D;2.0V</span><br><span class="line">VOL: &lt;&#x3D;0.1V     VIL: &lt;&#x3D;0.7V</span><br><span class="line"></span><br><span class="line">2.5V LVCMOS:     VCC: 2.5V</span><br><span class="line">VOH: &gt;&#x3D;2.0V     VIH: &gt;&#x3D;1.7V</span><br><span class="line">VOL: &lt;&#x3D;0.1V     VIL: &lt;&#x3D;0.7V</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;汇总常用电平标准。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="HARDWARE" scheme="https://www.cdutcl.com/categories/HARDWARE/"/>
    
    
      <category term="HARDWARE" scheme="https://www.cdutcl.com/tags/HARDWARE/"/>
    
  </entry>
  
  <entry>
    <title>patch命令用法</title>
    <link href="https://www.cdutcl.com/posts/bbe125fa/"/>
    <id>https://www.cdutcl.com/posts/bbe125fa/</id>
    <published>2020-03-04T02:06:05.000Z</published>
    <updated>2020-03-16T14:01:05.810Z</updated>
    
    <content type="html"><![CDATA[<p>要使用patch命令，先来看一下怎么用diff命令生成patch文件：  </p><a id="more"></a><h2 id="diff命令"><a href="#diff命令" class="headerlink" title="diff命令"></a>diff命令</h2><p>diff命令用于查找两个文件或者两个文件夹的差异，可以用这个命令来生成patch补丁文件。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ diff [选项] [源文件(夹)] [目的文件(夹)]</span><br><span class="line">  </span><br><span class="line">-r 递归处理，包括子文件夹及文件；</span><br><span class="line">-N 将缺席的文件视为空文件；</span><br><span class="line">-u 输出更详细的文件内容，生成patch要使用该参数，不然生成的patch不识别；</span><br></pre></td></tr></table></figure><p>比如我有a.txt和b.txt两个文件，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vi a.txt</span><br><span class="line"><span class="comment"># this is a file.</span></span><br><span class="line">hello a.</span><br><span class="line"></span><br><span class="line">$ vi b.txt</span><br><span class="line"><span class="comment"># this is b file.</span></span><br><span class="line">hello b.</span><br></pre></td></tr></table></figure><p>我直接用diff命令生成的差异如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ diff a.txt b.txt</span><br><span class="line">1,2c1,2</span><br><span class="line">&lt; <span class="comment"># this is a file.</span></span><br><span class="line">&lt; hello a.</span><br><span class="line">---</span><br><span class="line">&gt; <span class="comment"># this is b file.</span></span><br><span class="line">&gt; hello b.</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~</span><br><span class="line"></span><br><span class="line">$ diff -uN a.txt b.txt</span><br><span class="line">--- a.txt2020-03-04 10:31:12.716144886 +0800</span><br><span class="line">+++ b.txt2020-03-04 10:31:26.711730177 +0800</span><br><span class="line">@@ -1,2 +1,2 @@</span><br><span class="line">-<span class="comment"># this is a file.</span></span><br><span class="line">-hello a.</span><br><span class="line">+<span class="comment"># this is b file.</span></span><br><span class="line">+hello b.</span><br></pre></td></tr></table></figure><p>从上面可以看出，如果不用-u参数，生成出来的内容不是patch格式。另外注意，如果是对比两个文件夹，记得用r参数。</p><h2 id="patch命令"><a href="#patch命令" class="headerlink" title="patch命令"></a>patch命令</h2><p>利用上面的diff命令，可以生成patch补丁文件；那patch命令，就是使用补丁文件的命令：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ patch -pNUM &lt;patch_file&gt;</span><br><span class="line"></span><br><span class="line">-pNUM NUM用于指定忽略几层文件；</span><br><span class="line">-E 选项用于，是否保留空文件；</span><br><span class="line">-R 取消打过补丁的内容；</span><br></pre></td></tr></table></figure><p>-p后面的数字，是表示忽略几层路径，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--- a/dir1/dir2/file.txt2020-03-04 10:31:12.716144886 +0800</span><br><span class="line">+++ b/dir1/dir2/file.txt2020-03-04 10:31:26.711730177 +0800</span><br></pre></td></tr></table></figure><p>如果你当前路径在和a、b文件夹同级，你需要对a文件夹里面内容做patch，那么-p后面的数字应该是0；如果你进入a文件夹了，就需要忽略patch里面一个层级，那么-p后面数字应该是1；如果你进入a/dir1了，那么-p后面数字应该是2；以此类推。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要使用patch命令，先来看一下怎么用diff命令生成patch文件：  &lt;/p&gt;
    
    </summary>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/categories/XILINX/"/>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/tags/XILINX/"/>
    
  </entry>
  
  <entry>
    <title>(Xilinx-7系列) LVDS供电</title>
    <link href="https://www.cdutcl.com/posts/6f480b13/"/>
    <id>https://www.cdutcl.com/posts/6f480b13/</id>
    <published>2020-03-03T11:33:36.000Z</published>
    <updated>2020-03-16T13:56:53.628Z</updated>
    
    <content type="html"><![CDATA[<p>7系列IOBANK供电和LVDS电平规则。官方链接：<a href="https://www.xilinx.com/support/answers/43989.html" target="_blank" rel="noopener">AR#43989</a>  </p><a id="more"></a><hr><p>Checklist：<br><img src="https://www.xilinx.com/Image/hp_checklist_201409230904113294.PNG" alt="HPbank"><br><img src="https://www.xilinx.com/Image/hr_checklist_201409230904405649.PNG" alt="HRbank">    </p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;7系列IOBANK供电和LVDS电平规则。官方链接：&lt;a href=&quot;https://www.xilinx.com/support/answers/43989.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AR#43989&lt;/a&gt;  &lt;/p&gt;
    
    </summary>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/categories/XILINX/"/>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/tags/XILINX/"/>
    
  </entry>
  
  <entry>
    <title>EBAZ4205 Uboot移植（问题1）</title>
    <link href="https://www.cdutcl.com/posts/f1c8e5a2/"/>
    <id>https://www.cdutcl.com/posts/f1c8e5a2/</id>
    <published>2020-03-02T03:07:41.000Z</published>
    <updated>2020-03-16T14:00:13.104Z</updated>
    
    <content type="html"><![CDATA[<p>在网上找寻Zynq移植Linux的教程，大部分都是基于Xilinx官方步骤，采用petalinux那一套，为了搞清楚具体步骤，我采用了传统的一步一步的方式移植uboot。</p><a id="more"></a><p><img src="https://s1.ax1x.com/2020/03/12/8Z3STe.jpg" alt="8Z3STe.jpg"></p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>编译好uboot后，用u-boot合并fsbl生成BOOT.bin，放入SD卡启动，出现了如下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">No valid device tree binary found - please append one to U-Boot binary, use u-boot-dtb.bin or define CONFIG_OF_EMBED. For sandbox, use -d &lt;file.dtb&gt;</span><br><span class="line">initcall sequence 0405c19c failed at call 04052568 (err=-1)</span><br><span class="line"><span class="comment">### ERROR ### Please RESET the board ###</span></span><br></pre></td></tr></table></figure><p>大概意思就是device tree没有包含在uboot中，网上找到<a href="https://git.rigado.com/vesta/u-boot-2015.04/commit/bbb0b128c3956ac549471addc314702fbe0ace63?_ga=2.107636993.2025790433.1582948864-872288369.1582857663" target="_blank" rel="noopener">一个说明</a>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">This new option allows U-Boot to embed a binary device tree into its image</span><br><span class="line">to allow run-time control of peripherals. This device tree is <span class="keyword">for</span> U-Boot<span class="string">'s</span></span><br><span class="line"><span class="string">own use and is not necessarily the same one as is passed to the kernel.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The device tree compiler output should be placed in the $(obj)</span></span><br><span class="line"><span class="string">rooted tree. Since $(OBJCOPY) insists on adding the path to the</span></span><br><span class="line"><span class="string">generated symbol names, to ensure consistency it should be</span></span><br><span class="line"><span class="string">invoked from the directory where the .dtb file is located and</span></span><br><span class="line"><span class="string">given the input file name without the path.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">This commit contains my entry for the ugliest Makefile / shell interaction</span></span><br><span class="line"><span class="string">competition.</span></span><br><span class="line"><span class="string">Signed-off-by: default avatarSimon Glass &lt;sjg@chromium.org&gt;</span></span><br></pre></td></tr></table></figure><p>于是在defconfig中增加:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_OF_EMBED=y</span><br></pre></td></tr></table></figure><p>然后报错就没有了。</p><hr><p>以上问题是在uboot2018.07版本上解决的，后面换了xilinx最新的uboot，采用该方法后，在uboot编译完成后，出现了如下提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">===================== WARNING ======================</span><br><span class="line">CONFIG_OF_EMBED is enabled. This option should only</span><br><span class="line">be used <span class="keyword">for</span> debugging purposes. Please use</span><br><span class="line">CONFIG_OF_SEPARATE <span class="keyword">for</span> boards <span class="keyword">in</span> mainline.</span><br><span class="line">See doc/README.fdt-control <span class="keyword">for</span> more info.</span><br><span class="line">====================================================</span><br></pre></td></tr></table></figure><p>Warning建议别把dtb嵌入到uboot中，我这次就先将就这么用，至于dtb不合并在uboot中，我就不会了，后面有时间再学了。</p><hr><p><strong>2020-3-2更新</strong><br>后面再网上找的一篇文章：<a href="https://blog.csdn.net/weixin_43048906/article/details/102527494" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43048906/article/details/102527494</a><br>原来xilinx最新的源码包中，已经能够自动生成u-boot.elf文件了，并且该elf文件中，包含了dtb数据。<br>也就是说，不需要在defconfig中增加:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_OF_EMBED=y</span><br></pre></td></tr></table></figure><p>直接用生成文件中的u-boot.elf即可。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在网上找寻Zynq移植Linux的教程，大部分都是基于Xilinx官方步骤，采用petalinux那一套，为了搞清楚具体步骤，我采用了传统的一步一步的方式移植uboot。&lt;/p&gt;
    
    </summary>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/categories/XILINX/"/>
    
      <category term="EBAZ4205" scheme="https://www.cdutcl.com/categories/XILINX/EBAZ4205/"/>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/tags/XILINX/"/>
    
      <category term="ZYNQ" scheme="https://www.cdutcl.com/tags/ZYNQ/"/>
    
      <category term="EBAZ4205" scheme="https://www.cdutcl.com/tags/EBAZ4205/"/>
    
  </entry>
  
  <entry>
    <title>VIM笔记-gvim环境变量</title>
    <link href="https://www.cdutcl.com/posts/ba053a33/"/>
    <id>https://www.cdutcl.com/posts/ba053a33/</id>
    <published>2020-03-02T01:23:37.000Z</published>
    <updated>2020-03-16T13:53:09.432Z</updated>
    
    <content type="html"><![CDATA[<p>本文描述windows环境下使用的gvim，默认的环境变量。</p><a id="more"></a><h2 id="常用配置文件"><a href="#常用配置文件" class="headerlink" title="常用配置文件"></a>常用配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">系统vimrc配置文件：     $VIM\vimrc</span><br><span class="line">用户vimrc配置文件：     $HOME\_vimrc</span><br><span class="line">用户vimrc配置文件：     $HOME\vimfiles\vimrc</span><br><span class="line">用户vimrc配置文件：     $VIM\_vimrc</span><br></pre></td></tr></table></figure><p>其中， $VIM就是vim的安装路径；$HOME就是用户的根目录；</p><p>咱们经常在网上看到各种配置推荐，可以修改上述文件，即可保存配置；</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文描述windows环境下使用的gvim，默认的环境变量。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Vim" scheme="https://www.cdutcl.com/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>VIM笔记-中文乱码问题</title>
    <link href="https://www.cdutcl.com/posts/ed91337d/"/>
    <id>https://www.cdutcl.com/posts/ed91337d/</id>
    <published>2020-03-01T01:23:37.000Z</published>
    <updated>2020-03-15T02:34:15.400Z</updated>
    
    <content type="html"><![CDATA[<p>由于工作需要，可能经常需要在Windows和Linux两个环境中切换。Vim乱码一直是让我头疼的一个事情，网上描述该问题的文章有很多，但都是直接说怎么做的，没有讲清楚其中的原理，所以整理这篇文章，希望能把该问题彻底解释清楚：  </p><a id="more"></a><h2 id="1-默认编码"><a href="#1-默认编码" class="headerlink" title="1. 默认编码"></a>1. 默认编码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Windows中默认的文本编码是cp936，而Linux一般都是utf-8</span><br></pre></td></tr></table></figure><h2 id="2-查看文件编码"><a href="#2-查看文件编码" class="headerlink" title="2. 查看文件编码"></a>2. 查看文件编码</h2><p>当你打开一个文本后，你可以在vim中输入下面命令查看文本编码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:set fileencoding</span><br></pre></td></tr></table></figure><p>很多文章都是像上面这样描述，很容易让人误解。其实，上面这条命令并不是说查看文件的编码，而是vim自动识别的文件编码。所以，第一个乱码原因来了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果vim错误的识别了文件编码，用其他编码来打开文件，就可能会出现乱码</span><br></pre></td></tr></table></figure><p>这时，vim已经用它认为的编码模式打开了文本，vim就会按照fileencoding这个编码格式来处理文本，当你修改并保存文件时，vim就会以这个编码格式来保存文本。如果编码格式错乱了，那么，很可能你这个文本就全乱了。</p><h2 id="3-用什么编码打开文本"><a href="#3-用什么编码打开文本" class="headerlink" title="3. 用什么编码打开文本"></a>3. 用什么编码打开文本</h2><p>由于文本的编码格式有很多，所以vim很可能识别错文本编码。这时fileencodings这个变量就出来了，根据文本的编码特征建议设置变量如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:set fileencodings&#x3D;ucs-bom,utf-8,cp936</span><br></pre></td></tr></table></figure><p>这样设置以后，vim就会按照你列出的编码方式，依次去判断文本编码。有时即使是这样，vim还是有可能会识别错文本编码。但如果你事先知道文本的正确编码，你可以用下面的命令，强制用某种编码去打开文本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim file.txt -c &quot;e ++enc&#x3D;utf-8&quot;</span><br></pre></td></tr></table></figure><h2 id="4-亡羊补牢"><a href="#4-亡羊补牢" class="headerlink" title="4. 亡羊补牢"></a>4. 亡羊补牢</h2><p>如果你已经打开了一个文本，而vim用的编码方式又错了，这时你可以用下面的命令切换一种编码方式去打开该文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:edit ++enc&#x3D;utf-8</span><br></pre></td></tr></table></figure><h2 id="5-保存文件"><a href="#5-保存文件" class="headerlink" title="5. 保存文件"></a>5. 保存文件</h2><p>如前文所说，当你编辑好文件，需要保存文本时，首先文件内容就是按照变量fileencoding的格式来保存，但另外还有一个变量需要注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:set fileformat</span><br></pre></td></tr></table></figure><p>这个变量不影响文件编码，但是它会影响换行。这个有dos格式和unix格式，一般在vim下面的状态栏里面会显示该文件的格式。如果是dos格式，在linux下面打开时，行结尾会多一个^M(\r)。删除^M的方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%s&#x2F;\r&#x2F;&#x2F;g</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于工作需要，可能经常需要在Windows和Linux两个环境中切换。Vim乱码一直是让我头疼的一个事情，网上描述该问题的文章有很多，但都是直接说怎么做的，没有讲清楚其中的原理，所以整理这篇文章，希望能把该问题彻底解释清楚：  &lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Vim" scheme="https://www.cdutcl.com/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>EBAZ4205 Uboot移植过程</title>
    <link href="https://www.cdutcl.com/posts/28c1a47d/"/>
    <id>https://www.cdutcl.com/posts/28c1a47d/</id>
    <published>2020-02-28T00:43:00.000Z</published>
    <updated>2020-03-16T13:59:59.176Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍如何移植uboot到EBAZ4205板子上去。由于EBAZ4205是个野板子，资料例程都很少，经过在网上不停搜寻，终于在网友hhuysqt的博客上，找到了例程，非常感谢hhuysqt提供的<a href="https://hhuysqt.github.io/zynq2/" target="_blank" rel="noopener">文章</a>。</p><a id="more"></a><hr><h2 id="1-环境初始化"><a href="#1-环境初始化" class="headerlink" title="1. 环境初始化"></a>1. 环境初始化</h2><p>首先通过VM虚拟机安装ubuntu16.04，安装步骤网上有很多，不想去搜的可以参考<a href="https://www.jianshu.com/p/faf8bbbdd0f2" target="_blank" rel="noopener">这里</a>。</p><p>安装好ubuntu操作系统后，接着安装xilinx的petalinux，关于petalinux的安装，可以直接参考xilinx官方文档ug1144，里面详细描述了如何安装，这里也不再累述了。我把petalinux安装在下面的路径里了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/opt/pkg/petalinux/2018.3/</span><br><span class="line">```  </span><br><span class="line">  </span><br><span class="line">---</span><br><span class="line"><span class="comment">## 2. 下载uboot源码</span></span><br><span class="line">Xilinx官方提供了uboot源码，可以在github上面下载：  </span><br><span class="line">[https://github.com/Xilinx/u-boot-xlnx](https://github.com/Xilinx/u-boot-xlnx)  </span><br><span class="line">**这里提示一下：**由于github在国内访问很慢，<span class="built_in">clone</span>的方式可能会中断，建议直接下载压缩包。</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment">## 3. 生成Vivado工程</span></span><br><span class="line">基于ebaz4205板子搭建基本的vivado工程，具体过程可以参考这篇文章：  </span><br><span class="line">[https://hhuysqt.github.io/zynq1/](https://hhuysqt.github.io/zynq1/)  </span><br><span class="line">    </span><br><span class="line">搭建好工程以后，导出hdf并新建sdk工程，然后生成fsbl代码；</span><br><span class="line">    </span><br><span class="line">---</span><br><span class="line"><span class="comment">## 4. 生成设备树</span></span><br><span class="line">关于生成设备树，好像linux里面有比较方便的方式，这里我们采用SDK的方式：  </span><br><span class="line">- 首先下载设备树库文件，方法和上面下载uboot源码类似  </span><br><span class="line">    [https://github.com/Xilinx/device-tree-xlnx](https://github.com/Xilinx/device-tree-xlnx)  </span><br><span class="line">  </span><br><span class="line">- 解压下载的设备树库，然后在SDK工程中，添加这个库路径： Xilinx -&gt; Repositories </span><br><span class="line">![repo](https://xlnx.i.lithium.com/t5/image/serverpage/image-id/54730i0DD1C75B0E87E1B8/image-size/large?v=1.0&amp;px=999)  </span><br><span class="line">  </span><br><span class="line">- 然后用新建BSP的方式，新建一个该工程的设备树：File -&gt; New -&gt; Board Support Package  </span><br><span class="line">![new repo](https://xlnx.i.lithium.com/t5/image/serverpage/image-id/54731i8E31FFF7A9540097/image-size/large?v=1.0&amp;px=999)  </span><br><span class="line">  </span><br><span class="line">建立好上述工程后，在sdk路径下，就会生成一个device-tree的文件夹，然后将该文件夹拷贝到linux中，通过下面的命令即可编译出dtb文件：</span><br><span class="line">```bash</span><br><span class="line">dtc -I dts -O dtb -o system.dtb system-top.dts</span><br></pre></td></tr></table></figure><p><strong>特别提醒</strong><br>如果直接采用默认方式生成的设备树，启动uboot后网口没法用，从log可以看出是网口没有配置，于是参照zc702的设备树，在工程生成的dts中，添加了如下配置：</p><pre><code class="bash">&amp;gem0 {     status = <span class="string">"okay"</span>;     phy-mode = <span class="string">"rgmii-id"</span>;     phy-handle = &lt;&amp;ethernet_phy&gt;;     <span class="built_in">local</span>-mac-address = [00 0a 35 00 00 00];     ethernet_phy: ethernet-phy@0 {         reg = &lt;0&gt;;         device_type = <span class="string">"ethernet-phy"</span>;     };};</code></pre><p>然后，重新生成dtb文件，后面基于该dtb文件生成的uboot即可成功使用网络。</p><hr><h2 id="4-编译uboot"><a href="#4-编译uboot" class="headerlink" title="4. 编译uboot"></a>4. 编译uboot</h2><p>解压源码，进入源码目录:  </p><pre><code class="bash">$ <span class="built_in">cd</span> u-boot-xlnx-xilinx-v2019.2  </code></pre><p>复制一份defconfig文件，这里我们基于zc702的配置来：</p><pre><code class="bash">$ cp configs/zynq_zc702_defconfig configs/zynq_ebaz4205_defconfig</code></pre><p>编辑ebaz4205的defconfig文件，并在最后增加配置：</p><pre><code class="bash">CONFIG_NAND=yCONFIG_NAND_ZYNQ=yCONFIG_OF_EMBED=y</code></pre><p>然后使用下述命令即可编译生成uboot：</p><pre><code class="bash">make zynq_ebaz4205_defconfigmake EXT_DTB=device_tree/system.dtb</code></pre><p>然后我们就可以用生成的u-boot去生成BOOT.bin了<br><strong>友情提醒</strong><br>uboot编译后会有多个文件生成，我们得用u-boot，没有后缀那个，拷贝出去生成BOOT.bin时，记得要添加elf后缀。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍如何移植uboot到EBAZ4205板子上去。由于EBAZ4205是个野板子，资料例程都很少，经过在网上不停搜寻，终于在网友hhuysqt的博客上，找到了例程，非常感谢hhuysqt提供的&lt;a href=&quot;https://hhuysqt.github.io/zynq2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文章&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/categories/XILINX/"/>
    
      <category term="EBAZ4205" scheme="https://www.cdutcl.com/categories/XILINX/EBAZ4205/"/>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/tags/XILINX/"/>
    
      <category term="ZYNQ" scheme="https://www.cdutcl.com/tags/ZYNQ/"/>
    
      <category term="EBAZ4205" scheme="https://www.cdutcl.com/tags/EBAZ4205/"/>
    
  </entry>
  
  <entry>
    <title>Git远程操作</title>
    <link href="https://www.cdutcl.com/posts/65cd9483/"/>
    <id>https://www.cdutcl.com/posts/65cd9483/</id>
    <published>2020-02-27T07:16:48.000Z</published>
    <updated>2020-03-16T14:00:43.215Z</updated>
    
    <content type="html"><![CDATA[<p>本文整理总结了Git针对远程库的基本操作。<br>大部分内容参考了网上资料，然后根据自己理解整理成文。</p><a id="more"></a><hr><p>Git远程操作主要有以下几个命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git remote</span><br><span class="line">$ git <span class="built_in">clone</span></span><br><span class="line">$ git pull</span><br><span class="line">$ git push</span><br><span class="line">$ git fetch</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/12/8ZQynS.jpg" alt="8ZQynS.jpg"></p><h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h2><p>该命令用于设置查看远程仓库，使用方式如下。</p><p>设置远程链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin https://github.com/cdutcl/ebaz4205_demo.git</span><br></pre></td></tr></table></figure><p>查看远程链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin  https://github.com/cdutcl/ebaz4205_demo.git (fetch)</span><br><span class="line">origin  https://github.com/cdutcl/ebaz4205_demo.git (push)</span><br></pre></td></tr></table></figure><p>删除远程链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rm origin</span><br></pre></td></tr></table></figure><hr><h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><p>该命令用于克隆一个远程库，用了该命令后，会在本地建立一个和网上一样的库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/cdutcl/ebaz4205_demo.git</span><br></pre></td></tr></table></figure><hr><h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h2><p>该命令会在本地新建一个origin/master分支，然后下载远程仓库到本地，但是不影响本地master分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch origin</span><br><span class="line">From https://github.com/cdutcl/ebaz4205_demo</span><br><span class="line"> * [new branch]      master     -&gt; origin/master</span><br><span class="line"></span><br><span class="line">$ git branch -a</span><br><span class="line">* master</span><br><span class="line">  remotes/origin/master</span><br></pre></td></tr></table></figure><p>然后根据需要自行合并到本地自己的分支上。</p><hr><h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><p>这个是直接拉取远程分支，然后合并到本地，相当于fetch+merge操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git pull master:master</span><br><span class="line">remote: Enumerating objects: 5, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (3/3), 649 bytes | 2.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">From https://github.com/cdutcl/ebaz4205_demo</span><br><span class="line">   07c23e7..feff746  master     -&gt; origin/master</span><br></pre></td></tr></table></figure><p>pull命令后面冒号前后分别是：&lt;远程分支名&gt;:&lt;本地分支名&gt;</p><hr><h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><p>该命令就是将本地分支推送到远程仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br><span class="line">Enumerating objects: 5, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 8 threads</span><br><span class="line">Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 290 bytes | 48.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To https://github.com/cdutcl/ebaz4205_demo.git</span><br><span class="line">   feff746..c3c2834  master -&gt; master</span><br></pre></td></tr></table></figure><p>push命令后面冒号前后分别是：&lt;本地分支名&gt;:&lt;远程分支名&gt;</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文整理总结了Git针对远程库的基本操作。&lt;br&gt;大部分内容参考了网上资料，然后根据自己理解整理成文。&lt;/p&gt;
    
    </summary>
    
    
      <category term="LINUX" scheme="https://www.cdutcl.com/categories/LINUX/"/>
    
    
      <category term="GIT" scheme="https://www.cdutcl.com/tags/GIT/"/>
    
  </entry>
  
  <entry>
    <title>Vivado2018.1闪退问题</title>
    <link href="https://www.cdutcl.com/posts/d82096fc/"/>
    <id>https://www.cdutcl.com/posts/d82096fc/</id>
    <published>2020-02-27T02:45:40.000Z</published>
    <updated>2020-03-16T14:02:04.811Z</updated>
    
    <content type="html"><![CDATA[<p>有人在安装vivado2018.1以后，添加source后，出现闪退问题，通过上网查询，找到了解决办法。</p><a id="more"></a><hr><h2 id="官网给出了一个说明：AR-71064"><a href="#官网给出了一个说明：AR-71064" class="headerlink" title="官网给出了一个说明：AR#71064"></a>官网给出了一个说明：<a href="https://www.xilinx.com/support/answers/71064.html" target="_blank" rel="noopener">AR#71064</a></h2><p>从官方说明可以看出，这个问题可能出现在2017.1以后的版本。主要原因是srcscanner.exe这个程序的问题，2016.4以前的版本因为没有用这个程序，所以不会出问题。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>下载官方提供的解决补丁，解压后用管理员方式运行：<br><a href="boostSharedDirFixApp.zip">boostSharedDirFixApp.zip</a><br>运行完成后，重启电脑就行了。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有人在安装vivado2018.1以后，添加source后，出现闪退问题，通过上网查询，找到了解决办法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/categories/XILINX/"/>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/tags/XILINX/"/>
    
      <category term="VIVADO" scheme="https://www.cdutcl.com/tags/VIVADO/"/>
    
  </entry>
  
  <entry>
    <title>EBAZ4205 ZYNQ开发板初始化</title>
    <link href="https://www.cdutcl.com/posts/d5b766a5/"/>
    <id>https://www.cdutcl.com/posts/d5b766a5/</id>
    <published>2020-02-27T00:10:48.000Z</published>
    <updated>2020-03-16T13:59:36.827Z</updated>
    
    <content type="html"><![CDATA[<p>今天给大家介绍一个低成本的Zynq开发板：EBAZ4205</p><p>成本有多低呢？(^_^) 我买了三块，<font color=#DC143C><strong>100元包邮!</strong></font><br>而且我还是买的比较晚了，据说再早些时候更便宜。</p><a id="more"></a><hr><h2 id="1-整板概览"><a href="#1-整板概览" class="headerlink" title="1. 整板概览"></a>1. 整板概览</h2><p>我们看看这个便宜的开发板长什么样子呢？<br><img src="https://s1.ax1x.com/2020/03/12/8Z3STe.jpg" alt="8Z3STe.jpg"><br>如上图所示，主芯片采用的是Xilinx的XC7Z010-1CLG400，板子上含有的外设及接口有：<br><strong>33.33M晶振、NAND FLASH、DDR3、以太网、LED、UART插针、按键、IO插针</strong><br>板子的<strong>原理图</strong>在这里：<a href="ebaz_files/ebaz4205_sch.pdf">PDF</a></p><hr><h2 id="2-板子初始化"><a href="#2-板子初始化" class="headerlink" title="2. 板子初始化"></a>2. 板子初始化</h2><p>刚拿到板子，需要做几个初始化工作：</p><ul><li>焊接SD卡座</li><li>焊接UART插针</li><li>焊接JTAG插针</li><li>接通电源插座</li></ul><hr><h2 id="3-电源部分"><a href="#3-电源部分" class="headerlink" title="3. 电源部分"></a>3. 电源部分</h2><p>板子上J4是一个6P的电源插座，从丝印可以看出来是接12V电源，但当我供给它12V电源以后，发现板子并没有工作。经过排查后，从电路图才发现，该电源座输入的12V，有个二极管默认没有焊接：<br><img src="https://s1.ax1x.com/2020/03/12/8Z1zwD.png" alt="8Z1zwD.png"><br>图中可以看出这里需要一个二极管，直接短接即可，我为了安全起见，把板子上D21处的二极管挪过来了：<br><img src="https://s1.ax1x.com/2020/03/12/8Z39FH.png" alt="8Z39FH.png"></p><hr><h2 id="4-环境搭建"><a href="#4-环境搭建" class="headerlink" title="4. 环境搭建"></a>4. 环境搭建</h2><p>做好上述准备工作后，接好仿真器、串口电缆，就可以给开发板通电了。<br><img src="https://s1.ax1x.com/2020/03/12/8Z3A6P.jpg" alt="8Z3A6P.jpg"></p><hr><h2 id="5-通电串口打印"><a href="#5-通电串口打印" class="headerlink" title="5. 通电串口打印"></a>5. 通电串口打印</h2><p>打开串口终端，可以看到uboot的打印了，说明板子开始工作了。<br><img src="https://s1.ax1x.com/2020/03/12/8Z1xeO.png" alt="8Z1xeO.png"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天给大家介绍一个低成本的Zynq开发板：EBAZ4205&lt;/p&gt;
&lt;p&gt;成本有多低呢？(^_^) 我买了三块，&lt;font color=#DC143C&gt;&lt;strong&gt;100元包邮!&lt;/strong&gt;&lt;/font&gt;&lt;br&gt;而且我还是买的比较晚了，据说再早些时候更便宜。&lt;/p&gt;
    
    </summary>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/categories/XILINX/"/>
    
      <category term="EBAZ4205" scheme="https://www.cdutcl.com/categories/XILINX/EBAZ4205/"/>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/tags/XILINX/"/>
    
      <category term="ZYNQ" scheme="https://www.cdutcl.com/tags/ZYNQ/"/>
    
      <category term="EBAZ4205" scheme="https://www.cdutcl.com/tags/EBAZ4205/"/>
    
  </entry>
  
  <entry>
    <title>Xilinx下载器驱动问题</title>
    <link href="https://www.cdutcl.com/posts/d826f08d/"/>
    <id>https://www.cdutcl.com/posts/d826f08d/</id>
    <published>2020-02-26T10:52:09.000Z</published>
    <updated>2020-03-16T14:01:52.696Z</updated>
    
    <content type="html"><![CDATA[<p>Win10系统下，安装多个版本Vivado后，Xilinx DLC9驱动不识别问题。</p><a id="more"></a><h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>刚开始，电脑上安装了Vivado2015.4和ISE14.7两个软件，使用一切正常。后续有了升级Vivado版本的需求，又在电脑上装了2017.4版本的Vivado。<br>装好了2017.4的版本后，当插上DLC9下载后，状态灯成暗红色（原来正常情况下应该亮红色），开发板通电后，DLC9的状态灯没有变化，依然是暗红色（正常应该变为绿色）。<br><img src="https://s1.ax1x.com/2020/03/12/8Zlk4A.png" alt="8Zlk4A.png"></p><p>然后打开Vivado2017.4软件，进入Hardware Manager，然后点击Auto Connect后，从系统音判断，下载器出现了几次弹出操作，然后DLC9的灯状态变成绿色了，从设备管理器看驱动状态，好像也正常了。<br><img src="https://s1.ax1x.com/2020/03/12/8ZliAH.png" alt="8ZliAH.png"></p><p>但事实上，还是扫不到器件，报错信息如下：<br><img src="https://s1.ax1x.com/2020/03/12/8ZlFNd.png" alt="8ZlFNd.png"></p><p>尝试换成ISE的impact工具来用，发现还是没法扫链：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WARNING:iMPACT:923 - Can not find cable, check cable setup !</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/12/8ZlpnO.png" alt="8ZlpnO.png"></p><hr><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>根据问题现象，判断问题应该是出在驱动。于是重新安装Vivado2015.4的驱动。</p><p>进入Vivado2015.4的安装路径下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Xilinx\Vivado\2015.4\data\xicom\cable_drivers\nt64</span><br></pre></td></tr></table></figure><p>以管理员身份运行驱动安装程序：<br><img src="https://s1.ax1x.com/2020/03/12/8ZlCHe.png" alt="8ZlCHe.png"></p><p>重新安装驱动以后，再次插上DLC9下载器，灯初始状态就正常了，然后打开Vivado的Hardware Manager，也可以成功扫到器件了。<br><img src="https://s1.ax1x.com/2020/03/12/8ZlE9I.png" alt="8ZlE9I.png"></p><h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><p>在安装多个版本Vivado的场景下，如若下载器驱动出现问题，重新安装相应版本的驱动即可，特别注意的是：<br><font color=#DC143C>重新安装驱动时，一定要用系统管理员方式安装！！！</font></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Win10系统下，安装多个版本Vivado后，Xilinx DLC9驱动不识别问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/categories/XILINX/"/>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/tags/XILINX/"/>
    
  </entry>
  
  <entry>
    <title>Zynq电源设计注意事项</title>
    <link href="https://www.cdutcl.com/posts/5b72433c/"/>
    <id>https://www.cdutcl.com/posts/5b72433c/</id>
    <published>2018-06-03T11:13:26.000Z</published>
    <updated>2020-03-16T14:02:26.212Z</updated>
    
    <content type="html"><![CDATA[<p>本文内容主要来自Xilinx官方手册ds191，描述在使用Xilinx Zynq芯片时，电源设计需要考虑的地方。    </p><a id="more"></a><hr><h2 id="1-背景介绍"><a href="#1-背景介绍" class="headerlink" title="1. 背景介绍"></a>1. 背景介绍</h2><p>Xilinx Zynq系列芯片，分为PS和PL两个大的部分，他们电源分别独立。所以供电时可以单独考虑。</p><h2 id="2-电源汇总"><a href="#2-电源汇总" class="headerlink" title="2. 电源汇总"></a>2. 电源汇总</h2><h3 id="2-1-PS部分需要供电如下："><a href="#2-1-PS部分需要供电如下：" class="headerlink" title="2.1 PS部分需要供电如下："></a>2.1 PS部分需要供电如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">VCCPINT:  1.0V  </span><br><span class="line">VCCPAUX:  1.8V  </span><br><span class="line">VCCPLL:   1.8V  </span><br><span class="line">VCCO_DDR: 1.14V~1.89V  </span><br><span class="line">VCCO_MIO: 1.71V~3.465V</span><br></pre></td></tr></table></figure><h3 id="2-2-PL部分需要供电如下："><a href="#2-2-PL部分需要供电如下：" class="headerlink" title="2.2 PL部分需要供电如下："></a>2.2 PL部分需要供电如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">VCCINT:   1.0V  </span><br><span class="line">VCCBRAM:  1.0V  </span><br><span class="line">VCCAUX:   1.8V  </span><br><span class="line">VCCO:     1.14V~3.465V(HR)  1.14V~1.89V(HP)  </span><br><span class="line">VCCAUX_IO: 1.8V&#x2F;2.0V</span><br></pre></td></tr></table></figure><h3 id="2-3-GT部分需要供电如下："><a href="#2-3-GT部分需要供电如下：" class="headerlink" title="2.3 GT部分需要供电如下："></a>2.3 GT部分需要供电如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">VMGTAVCC: 1.0V(&lt;&#x3D;10.3125GHz) 1.05V(&gt;10.3125GHz) </span><br><span class="line">VMGTAVTT: 1.2V  </span><br><span class="line">VMGTVCCAUX: 1.8V</span><br><span class="line">VMGTAVTTRCAL: 1.2V</span><br></pre></td></tr></table></figure><h3 id="2-4-XADC部分需要供电如下："><a href="#2-4-XADC部分需要供电如下：" class="headerlink" title="2.4 XADC部分需要供电如下："></a>2.4 XADC部分需要供电如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VCCADC:   1.8V</span><br><span class="line">VREFP:    1.25V</span><br></pre></td></tr></table></figure><h2 id="3-上下电时序"><a href="#3-上下电时序" class="headerlink" title="3. 上下电时序"></a>3. 上下电时序</h2><h3 id="3-1-PS部分上下电时序"><a href="#3-1-PS部分上下电时序" class="headerlink" title="3.1 PS部分上下电时序"></a>3.1 PS部分上下电时序</h3><p>上电：VCCPINT -&gt; VCCPAUX &amp; VCCPLL -&gt; VCCO(MIO0,MIO1,DDR)<br>下电：和上面相反。  </p><h3 id="3-2-PL部分上下电时序"><a href="#3-2-PL部分上下电时序" class="headerlink" title="3.2 PL部分上下电时序"></a>3.2 PL部分上下电时序</h3><p>上电：VCCINT -&gt; VCCBRAM -&gt; VCCAUX -&gt; VCCAUX_IO -&gt; VCCO<br>下电：和上面相反。   </p><h2 id="4-电源斜坡"><a href="#4-电源斜坡" class="headerlink" title="4. 电源斜坡"></a>4. 电源斜坡</h2><p>所有的电源斜坡：0.2ms ~ 50ms</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文内容主要来自Xilinx官方手册ds191，描述在使用Xilinx Zynq芯片时，电源设计需要考虑的地方。    &lt;/p&gt;
    
    </summary>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/categories/XILINX/"/>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/tags/XILINX/"/>
    
      <category term="ZYNQ" scheme="https://www.cdutcl.com/tags/ZYNQ/"/>
    
  </entry>
  
  <entry>
    <title>Zynq外设之--地址空间</title>
    <link href="https://www.cdutcl.com/posts/33b86a6d/"/>
    <id>https://www.cdutcl.com/posts/33b86a6d/</id>
    <published>2018-06-02T08:50:31.000Z</published>
    <updated>2020-03-14T13:08:01.028Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要描述xilinx zynq7000系列的地址空间分布。</p><a id="more"></a><p>Zynq系列器件，系统空间分布如下：<br><img src="https://s1.ax1x.com/2020/03/12/8Z1soQ.png" alt="8Z1soQ.png"></p><p>其中，PS端的IO外设挂在32位APB总线下，地址分布如下：<br><img src="https://s1.ax1x.com/2020/03/12/8Z1rdg.png" alt="8Z1rdg.png"></p><p>SMC地址空间如下：<br><img src="https://s1.ax1x.com/2020/03/12/8Z10L8.png" alt="8Z10L8.png"></p><p>PS系统空间分布如下：<br><img src="https://s1.ax1x.com/2020/03/12/8Z1wsf.png" alt="8Z1wsf.png"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要描述xilinx zynq7000系列的地址空间分布。&lt;/p&gt;
    
    </summary>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/categories/XILINX/"/>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/tags/XILINX/"/>
    
      <category term="ZYNQ" scheme="https://www.cdutcl.com/tags/ZYNQ/"/>
    
  </entry>
  
  <entry>
    <title>Zynq外设之--GPIO</title>
    <link href="https://www.cdutcl.com/posts/21e5acfb/"/>
    <id>https://www.cdutcl.com/posts/21e5acfb/</id>
    <published>2018-06-01T07:02:40.000Z</published>
    <updated>2020-03-14T13:07:53.987Z</updated>
    
    <content type="html"><![CDATA[<p>本文内容主要来自官方手册ug585，根据个人理解整理成文。</p><a id="more"></a><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Zynq的GPIO外设可以控制54个MIO，以及通过EMIO和PL交互的64个input、128个output。然后，这些IO分别分配到了4个BANK的GPIO控制器上。每个IO可以相互独立的配置为input、output、中断。</p><h2 id="框图"><a href="#框图" class="headerlink" title="框图"></a>框图</h2><p><img src="https://s1.ax1x.com/2020/03/12/8Z1WQ0.png" alt="8Z1WQ0.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Bank0:  MIO[31:0]</span><br><span class="line">Bank1:  MIO[53:32]</span><br><span class="line">Bank2:  EMIO[31:0]</span><br><span class="line">Bank3:  EMIO[63:32]</span><br></pre></td></tr></table></figure><h2 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h2><p>下面是一个GPIO通道的功能框图：<br><img src="https://s1.ax1x.com/2020/03/12/8Z12zq.png" alt="8Z12zq.png"></p><h2 id="例外情况"><a href="#例外情况" class="headerlink" title="例外情况"></a>例外情况</h2><p>MIO[8:7]：这两个脚是用来表示BANK电压的。</p><h2 id="系统功能"><a href="#系统功能" class="headerlink" title="系统功能"></a>系统功能</h2><ul><li>GPIO外设的中断号是52</li><li>时钟采用CPU_1x</li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文内容主要来自官方手册ug585，根据个人理解整理成文。&lt;/p&gt;
    
    </summary>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/categories/XILINX/"/>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/tags/XILINX/"/>
    
      <category term="ZYNQ" scheme="https://www.cdutcl.com/tags/ZYNQ/"/>
    
  </entry>
  
  <entry>
    <title>(Xilinx-7系配置5) 配置bit位流格式</title>
    <link href="https://www.cdutcl.com/posts/bded59c/"/>
    <id>https://www.cdutcl.com/posts/bded59c/</id>
    <published>2018-04-15T10:27:37.000Z</published>
    <updated>2020-03-14T13:06:22.740Z</updated>
    
    <content type="html"><![CDATA[<p>7系列FPGA的配置位流bit，头部开始有一些冗余的基本信息：比如bit的生成时间、生成工具的版本、top名称等信息。这些信息仅仅用于标识bit文件本身，不会下载到fpga或配置flash中。除去这些信息以外，其他剩下的就是下载到fpga、或flash中的数据。也就是bin文件的内容。</p><a id="more"></a><h2 id="1、配置数据构成"><a href="#1、配置数据构成" class="headerlink" title="1、配置数据构成"></a>1、配置数据构成</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">FFFFFFFF    &#x2F;&#x2F; Dummy 数据1</span><br><span class="line">...</span><br><span class="line">FFFFFFFF    &#x2F;&#x2F; Dummy 数据8</span><br><span class="line">000000BB    &#x2F;&#x2F; 总线位宽检测字1</span><br><span class="line">11220044    &#x2F;&#x2F; 总线位宽检测字2</span><br><span class="line">FFFFFFFF    &#x2F;&#x2F; Dummy 数据</span><br><span class="line">FFFFFFFF    &#x2F;&#x2F; Dummy 数据</span><br><span class="line">AA995566    &#x2F;&#x2F; 同步字</span><br><span class="line">20000000    &#x2F;&#x2F; NOOP数据</span><br><span class="line">30022001    &#x2F;&#x2F; Packet Type 1: 写TIMER寄存器，WORD_COUNT&#x3D;1  # 具体格式在后面描述</span><br><span class="line">00000000    &#x2F;&#x2F; TIMER[31:0]&#x3D;00000000(hex)</span><br><span class="line">...         &#x2F;&#x2F; 具体内容可以去ug470查，我这里就不搬过来了。</span><br><span class="line">20000000    &#x2F;&#x2F; NOOP数据</span><br><span class="line">...         &#x2F;&#x2F; NOOP数据</span><br><span class="line">30002001    &#x2F;&#x2F; Packet Type 1: 写FAR寄存器，WORD_COUNT&#x3D;1</span><br><span class="line">00000000    &#x2F;&#x2F; 写Frame地址为0</span><br><span class="line">30002001    &#x2F;&#x2F; Packet Type 1: 写CMD寄存器，WORD_COUNT&#x3D;1</span><br><span class="line">00000001    &#x2F;&#x2F; 00001 写配置数据命令</span><br><span class="line">20000000    &#x2F;&#x2F; NOOP数据</span><br><span class="line">30004000    &#x2F;&#x2F; Packet Type 1: 写FDRI寄存器，WORD_COUNT&#x3D;0</span><br><span class="line">502BA520    &#x2F;&#x2F; Packet Type 2: 写FDRI寄存器，WORD_COUNT&#x3D;2860320</span><br><span class="line">00000000    &#x2F;&#x2F; 数据字1，之前都是配置寄存那些，从这里开始就是真正配置FPGA内部的配置数据，一帧一帧组合在一起</span><br><span class="line">...         &#x2F;&#x2F; 数据字N</span><br><span class="line">00000000    &#x2F;&#x2F; 数据字2860320( 101字&#x2F;帧 x 28320帧)</span><br><span class="line">30000001    &#x2F;&#x2F; Packet Type 1: 写CRC寄存器，WORD_COUNT&#x3D;1</span><br><span class="line">????????    &#x2F;&#x2F; 写CRC值，如果值和FPGA内部计算出来不一致，就进入错误态。</span><br><span class="line">20000000    &#x2F;&#x2F; NOOP数据</span><br><span class="line">20000000    &#x2F;&#x2F; NOOP数据</span><br><span class="line">...         &#x2F;&#x2F; 然后又操作几个寄存器，比如释放同步信号等。</span><br><span class="line">20000000    &#x2F;&#x2F; NOOP数据</span><br><span class="line">...         &#x2F;&#x2F; NOOP数据</span><br><span class="line">20000000    &#x2F;&#x2F; NOOP数据</span><br></pre></td></tr></table></figure><h2 id="2、配置数据帧"><a href="#2、配置数据帧" class="headerlink" title="2、配置数据帧"></a>2、配置数据帧</h2><p>如上述格式描述所示，bit其实就是由一些头部功能字段+配置寄存器字段+真实配置数据帧+收尾配置寄存器这几部分组成。7系列的配置数据由N个配置数据帧组成，每个帧由101个32位数据组成。</p><h2 id="3、配置包格式"><a href="#3、配置包格式" class="headerlink" title="3、配置包格式"></a>3、配置包格式</h2><p>如上述格式描述所示，配置FPGA寄存器的操作是由配置包的形式，包格式有两种：type1和type2。<br>type1配置包格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[31:29]: 001 &#x3D;&gt; type1</span><br><span class="line">[28:27]: xx  &#x3D;&gt; OP code (00: NOP  01: Read  10: Write  11: Reserved)</span><br><span class="line">[26:13]: xxx &#x3D;&gt; 低5位有效，标识寄存器地址</span><br><span class="line">[10:0 ]: xxx &#x3D;&gt; 11位，标识后面紧跟的32位数据个数</span><br></pre></td></tr></table></figure><p>type2配置包格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[31:29]: 010 &#x3D;&gt; type2</span><br><span class="line">[28:27]: xx  &#x3D;&gt; OP code (00: NOP  01: Read  10: Write  11: Reserved)</span><br><span class="line">[26:0 ]: xxx &#x3D;&gt; 27位，标识后面紧跟的32位数据个数</span><br></pre></td></tr></table></figure><p>注意：type2配置包只能跟着type1，主要是为了用于写大段数据时，因为type1数据长度字段只有11位，不能表示太长的数据，所以才多出这么个type2配置包。</p><h2 id="4、配置寄存器列表"><a href="#4、配置寄存器列表" class="headerlink" title="4、配置寄存器列表"></a>4、配置寄存器列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(00)00000:  CRC     R&#x2F;W     &#x2F;&#x2F; CRC寄存器</span><br><span class="line">(01)00001:  FAR     R&#x2F;W     &#x2F;&#x2F; 帧地址寄存器</span><br><span class="line">(02)00010:  FDRI    WO      &#x2F;&#x2F; 写帧数据寄存器</span><br><span class="line">(03)00011:  FDRO    RO      &#x2F;&#x2F; 度帧数据寄存器</span><br><span class="line">(04)00100:  CMD     R&#x2F;W     &#x2F;&#x2F; 命令寄存器</span><br><span class="line">(05)00101:  CTL0    R&#x2F;W     &#x2F;&#x2F; 控制寄存器0</span><br><span class="line">(06)00110:  MASK    R&#x2F;W     &#x2F;&#x2F; 控制寄存器的MASK寄存器</span><br><span class="line">(07)00111:  STAT    RO      &#x2F;&#x2F; 状态寄存器</span><br><span class="line">(08)01000:  LOUT    WO      &#x2F;&#x2F; Legacy输出寄存器</span><br><span class="line">(09)01001:  COR0    R&#x2F;W     &#x2F;&#x2F; 配置寄存器0</span><br><span class="line">(0A)01010:  MFWR    WO      &#x2F;&#x2F; 多帧数据写寄存器</span><br><span class="line">(0B)01011:  CBC     WO      &#x2F;&#x2F; CBC值寄存器</span><br><span class="line">(0C)01100:  IDCODE  R&#x2F;W     &#x2F;&#x2F; 设备ID寄存器</span><br><span class="line">(0D)01101:  AXSS    R&#x2F;W     &#x2F;&#x2F; 用户寄存器</span><br><span class="line">(0E)01110:  COR1    R&#x2F;W     &#x2F;&#x2F; 配置寄存器1</span><br><span class="line">(10)10000:  WBSTAR  R&#x2F;W     &#x2F;&#x2F; 热跳转地址寄存器</span><br><span class="line">(11)10001:  TIMER   R&#x2F;W     &#x2F;&#x2F; 看门狗计时器</span><br><span class="line">(16)10110:  BOOTSTS RO      &#x2F;&#x2F; 启动历史状态寄存器</span><br><span class="line">(18)11000:  CTL1    R&#x2F;W     &#x2F;&#x2F; 控制寄存器1</span><br><span class="line">(1F)11111:  BSPI    R&#x2F;W     &#x2F;&#x2F; BPI&#x2F;SPI配置寄存器</span><br></pre></td></tr></table></figure><p>下面我挑选一些常用寄存器的描述，如果想了解下面没描述到的寄存器，可以直接参考xilinx的ug470里面的内容：</p><h3 id="4-1-FAR-帧地址寄存器详解"><a href="#4-1-FAR-帧地址寄存器详解" class="headerlink" title="4.1 FAR 帧地址寄存器详解"></a>4.1 FAR 帧地址寄存器详解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[25:23]: 类型，000: CLB,I&#x2F;O,CLK  001: BRAM  010: CFG_CLB</span><br><span class="line">[22]:    0: 上半部分   1：下半部分</span><br><span class="line">[21:17]: 行地址</span><br><span class="line">[16:7]:  列地址</span><br><span class="line">[6:0]:   每列里面子地址</span><br></pre></td></tr></table></figure><h3 id="4-2-CMD-命令寄存器详解"><a href="#4-2-CMD-命令寄存器详解" class="headerlink" title="4.2 CMD 命令寄存器详解"></a>4.2 CMD 命令寄存器详解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">00000:  NULL    &#x2F;&#x2F; 空命令</span><br><span class="line">00001:  WCFG    &#x2F;&#x2F; 写配置数据</span><br><span class="line">00010:  MFW     &#x2F;&#x2F; 写多帧数据</span><br><span class="line">00011:  DGHIGH  &#x2F;&#x2F; 最后一帧命令，用于释放内部的GHIGH_B信号</span><br><span class="line">00100:  RCFG    &#x2F;&#x2F; 读配置数据</span><br><span class="line">00101:  START   &#x2F;&#x2F; 启动Startup序列</span><br><span class="line">00110:  RCAP    &#x2F;&#x2F; 复位CAPTURE信号</span><br><span class="line">00111:  RCRC    &#x2F;&#x2F; 复位CRC值寄存器</span><br><span class="line">01000:  AGHIGH  &#x2F;&#x2F; 拉低内部GHIGH_B信号，用于将内部互联信号置为高阻，以免冲突</span><br><span class="line">01001:  SWITCH  &#x2F;&#x2F; 切换CCLK频率，CCLK频率具体值在COR0中配置</span><br><span class="line">01010:  GRESTORE&#x2F;&#x2F; 拉高GRESTORE信号，复位或置位IOB和CLB_FF</span><br><span class="line">01011:  SHUTDOWN&#x2F;&#x2F; 关闭序列</span><br><span class="line">01100:  GCAPTURE&#x2F;&#x2F; 拉高GCAPTURE信号</span><br><span class="line">01101:  DESYNC  &#x2F;&#x2F; 复位DALIGN信号，解同步指令</span><br><span class="line">01111:  IPROG   &#x2F;&#x2F; 内部PROG触发，Multiboot跳转</span><br><span class="line">10000:  CRCC    &#x2F;&#x2F; ！！！不晓得，没看懂！！！</span><br><span class="line">10001:  LTIMER  &#x2F;&#x2F; 重新Load看门狗</span><br><span class="line">10010:  BSPI_READ&#x2F;&#x2F; 重新读位流</span><br><span class="line">10011:  FALL_EDGE&#x2F;&#x2F; 下降沿采样</span><br></pre></td></tr></table></figure><h3 id="4-3-CTL0-控制寄存器0"><a href="#4-3-CTL0-控制寄存器0" class="headerlink" title="4.3 CTL0 控制寄存器0"></a>4.3 CTL0 控制寄存器0</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[31]: EFUSE_KEY         &#x2F;&#x2F; AES key存哪里，0：电池BRAM  1：eFUSE</span><br><span class="line">[30]: ICAP_SELECT       &#x2F;&#x2F; 0：用上半部的ICAPE2  1：用下半部的ICAPE2</span><br><span class="line">[12]: OverTempPowerDown &#x2F;&#x2F; 超温关机功能 0：关闭  1：打开</span><br><span class="line">[10]: ConfigFallback    &#x2F;&#x2F; 回读功能 0：使能  1：不使能</span><br><span class="line">[8]: GLUTMASK_B         &#x2F;&#x2F; 可变内容是否回读 0：读  1：不读</span><br><span class="line">[7]: FARSRC             &#x2F;&#x2F; 没看懂</span><br><span class="line">[6]: DEC                &#x2F;&#x2F; AES解密 0：不使能 1：使能</span><br><span class="line">[5:4]: SBITS            &#x2F;&#x2F; 秘密等级  00：写读都可以 01：关闭读  1x：写读都关闭</span><br><span class="line">[3]: PERSIST            &#x2F;&#x2F; 是否保持配置专用管脚功能  0：不保留  1：保留</span><br><span class="line">[0]: GTS_USR_B          &#x2F;&#x2F; 三态IO是否上下拉  0：不拉 1：上拉</span><br></pre></td></tr></table></figure><h3 id="4-5-STAT-状态寄存器"><a href="#4-5-STAT-状态寄存器" class="headerlink" title="4.5 STAT 状态寄存器"></a>4.5 STAT 状态寄存器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[26:25]: BUS_WIDTH      &#x2F;&#x2F; 00：x1 </span><br><span class="line">                           01：x8 </span><br><span class="line">                           10：x16 </span><br><span class="line">                           11：x32</span><br><span class="line">[20:18]: STARTUP_STATE  &#x2F;&#x2F; Phase 0 &#x3D; 000</span><br><span class="line">                           Phase 1 &#x3D; 001</span><br><span class="line">                           Phase 2 &#x3D; 011</span><br><span class="line">                           Phase 3 &#x3D; 010</span><br><span class="line">                           Phase 4 &#x3D; 110</span><br><span class="line">                           Phase 5 &#x3D; 111</span><br><span class="line">                           Phase 6 &#x3D; 101</span><br><span class="line">                           Phase 7 &#x3D; 100</span><br><span class="line">[16]: DEC_ERROR         &#x2F;&#x2F; 0: No error 1: ERROR</span><br><span class="line">[15]: ID_ERROR          &#x2F;&#x2F; 0: No error 1: ERROR</span><br><span class="line">[14]: DONE              &#x2F;&#x2F; DONE管脚状态</span><br><span class="line">[13]: RELEASE_DONE      &#x2F;&#x2F; DONE管脚内部状态</span><br><span class="line">[12]: INITB             &#x2F;&#x2F; INITB管脚状态</span><br><span class="line">[11]: RELEASE_INITB     &#x2F;&#x2F; INITB管脚内部状态</span><br><span class="line">[10:8]: MODE            &#x2F;&#x2F; M[2:0]管脚状态</span><br><span class="line">[7]: GHIGH_B            &#x2F;&#x2F; GHIGH_B信号状态</span><br><span class="line">[6]: GWE                &#x2F;&#x2F; GWE信号状态</span><br><span class="line">[5]: GTS_CFG_B          &#x2F;&#x2F; GTS_CFG_B信号状态</span><br><span class="line">[4]: EOS                &#x2F;&#x2F; 启动序列是否完成</span><br><span class="line">[3]: DCI_MATCH          &#x2F;&#x2F; DCI_MATCH</span><br><span class="line">[2]: MMCM_LOCK          &#x2F;&#x2F; MMCM_LOCK</span><br><span class="line">[1]: PART_SECURED       &#x2F;&#x2F; PART_SECURED</span><br><span class="line">[0]: CRC_ERROR          &#x2F;&#x2F; CRC_ERROR</span><br></pre></td></tr></table></figure><h3 id="4-6-COR0-配置寄存器0"><a href="#4-6-COR0-配置寄存器0" class="headerlink" title="4.6 COR0 配置寄存器0"></a>4.6 COR0 配置寄存器0</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[27]: PWRDWN_STAT       &#x2F;&#x2F; 改变DONE管脚功能为POWNDOWN</span><br><span class="line">[25]: DONE_PIPE         &#x2F;&#x2F; 是否寄存器一拍DONE信号</span><br><span class="line">[24]: DRIVE_DONE        &#x2F;&#x2F; 0：DONE信号开漏  1：DONE信号驱动</span><br><span class="line">[23]: SINGLE            &#x2F;&#x2F; 搞不懂</span><br><span class="line">[22:17]: OSCFSEL        &#x2F;&#x2F; CCLK频率，2M~60M</span><br><span class="line">[16:15]: SSCLKSRC       &#x2F;&#x2F; 00: CCLK  01:UserClk (per connection on the CAPTUREE2 block)  1x: JTAGClk</span><br><span class="line">[14:12]: DONE_CYCLE     &#x2F;&#x2F; DONE在哪个阶段起来</span><br><span class="line">                           000: Startup phase 1</span><br><span class="line">                           001: Startup phase 2</span><br><span class="line">                           010: Startup phase 3</span><br><span class="line">                           011: Startup phase 4</span><br><span class="line">                           100: Startup phase 5</span><br><span class="line">                           101: Startup phase 6</span><br><span class="line">                           111: Keep (not recommended)</span><br><span class="line">[11:9]: MATCH_CYCLE     &#x2F;&#x2F; DCI Match阶段</span><br><span class="line">[8:6]: LOCK_CYCLE       &#x2F;&#x2F; MMCK lock阶段</span><br><span class="line">[5:3]: GTS_CYCLE        &#x2F;&#x2F; GTS释放阶段</span><br><span class="line">[2:0]: GWE_CYCLE        &#x2F;&#x2F; GWE释放阶段</span><br></pre></td></tr></table></figure><h3 id="4-7-COR1-配置寄存器1"><a href="#4-7-COR1-配置寄存器1" class="headerlink" title="4.7 COR1 配置寄存器1"></a>4.7 COR1 配置寄存器1</h3><p>这里省略了一些我没理清除的一些内容。。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[3:2]: BPI_1ST_READ_CYCLE &#x2F;&#x2F; First byte read timing:</span><br><span class="line">                             00: 1 CCLK (default)</span><br><span class="line">                             01: 2 CCLKs</span><br><span class="line">                             10: 3 CCLKs</span><br><span class="line">                             11: 4 CCLKs</span><br><span class="line">[1:0]: BPI_PAGE_SIZE      &#x2F;&#x2F; Flash memory page size:</span><br><span class="line">                             00: 1 byte&#x2F;word (default)</span><br><span class="line">                             01: 4 bytes&#x2F;words</span><br><span class="line">                             10: 8 bytes&#x2F;words</span><br><span class="line">                             11: Reserved</span><br></pre></td></tr></table></figure><h3 id="4-8-BPI配置寄存器"><a href="#4-8-BPI配置寄存器" class="headerlink" title="4.8 BPI配置寄存器"></a>4.8 BPI配置寄存器</h3><p><img src="https://s1.ax1x.com/2020/03/14/8lGyXF.png" alt="8lGyXF.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;7系列FPGA的配置位流bit，头部开始有一些冗余的基本信息：比如bit的生成时间、生成工具的版本、top名称等信息。这些信息仅仅用于标识bit文件本身，不会下载到fpga或配置flash中。除去这些信息以外，其他剩下的就是下载到fpga、或flash中的数据。也就是bin文件的内容。&lt;/p&gt;
    
    </summary>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/categories/XILINX/"/>
    
      <category term="Xilinx 7系列配置" scheme="https://www.cdutcl.com/categories/XILINX/Xilinx-7%E7%B3%BB%E5%88%97%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/tags/XILINX/"/>
    
  </entry>
  
  <entry>
    <title>(Xilinx-7系配置4) 配置加载流程</title>
    <link href="https://www.cdutcl.com/posts/ea757907/"/>
    <id>https://www.cdutcl.com/posts/ea757907/</id>
    <published>2018-04-14T12:37:58.000Z</published>
    <updated>2020-03-14T13:06:12.580Z</updated>
    
    <content type="html"><![CDATA[<p>xilinx 7系列fpga配置接口有多种多样，但内部流程都是一样的，如下图所示：<br><img src="https://s1.ax1x.com/2020/03/12/8mmWUs.png" alt="8mmWUs.png"></p><ul><li>设备上电</li><li>清除配置</li><li>采样配置模式</li><li>查找同步</li><li>设备ID检测</li><li>加载配置位流</li><li>CRC校验</li><li>启动序列<a id="more"></a><h3 id="阶段1-设备上电"><a href="#阶段1-设备上电" class="headerlink" title="阶段1. 设备上电"></a>阶段1. 设备上电</h3>FPGA的电源VCCO0、VCCAUX、VCCBRAM、VCCINT都需要正常上电，下面这些是配置需要的供电：<br><img src="https://s1.ax1x.com/2020/03/12/8mMKsK.png" alt="8mMKsK.png"></li></ul><p>上电时序如下：<br><img src="https://s1.ax1x.com/2020/03/12/8m1tzR.png" alt="8m1tzR.png"></p><p>在fpga正常上电或配置后，可以通过拉低PROGRAM_B管脚重配置FPGA，时序如下：<br><img src="https://s1.ax1x.com/2020/03/12/8mGAIO.png" alt="8mGAIO.png"></p><p>从上图可以看出，加载模式管脚是在INIT_B上升沿采样的。</p><h3 id="阶段2-清除配置"><a href="#阶段2-清除配置" class="headerlink" title="阶段2. 清除配置"></a>阶段2. 清除配置</h3><p><img src="https://s1.ax1x.com/2020/03/12/8mGRyR.png" alt="8mGRyR.png"><br>紧接着上电阶段、或者PROGRAM_B拉低后、或者JTAG发送JPROGRAM指令后、或者IPROG命令后、或者fallback发生后，开始进行配置区域清除操作。BRAM恢复到初始态，FF等通过GSR全局复位管脚复位。通过GTS信号，将IO管脚都置为高阻态，如果PUDC_B管脚为低，IO上会有一个上拉电阻使能。这时INIT_B由FPGA内部驱动拉低，等待时间TPOR后(参考前面时序图)释放INIT_B，INIT_B由外部上拉电阻拉高。如果外部强制把INIT_B拉低，也就是说不让INIT_B起来，就可以实现延迟启动的功能。</p><h3 id="阶段3-采样配置模式"><a href="#阶段3-采样配置模式" class="headerlink" title="阶段3. 采样配置模式"></a>阶段3. 采样配置模式</h3><p><img src="https://s1.ax1x.com/2020/03/12/8mt9Mj.png" alt="8mt9Mj.png"><br>当INIT_B上升沿发生，FPGA采样M[2:0]配置管脚，如果是Master模式就驱动CCLK输出，对于BPI或者SelectMap模式，这时内部状态是x8模式，这个模式会持续到位宽检测那个时刻。</p><h3 id="阶段4-查找同步"><a href="#阶段4-查找同步" class="headerlink" title="阶段4. 查找同步"></a>阶段4. 查找同步</h3><p><img src="https://s1.ax1x.com/2020/03/12/8mtbpF.png" alt="8mtbpF.png"><br>基于上一步采样的模式，接下来就开始读取配置数据了，配置数据的头部，都含有用于判断位宽的数据，位宽判断方法请参考我另外一篇博文：<a href="https://www.cdutcl.com/posts/60ffd69e/">位流位宽检测机理</a>，当总线位宽确定后，就按照真实位宽查找配置数据中的同步头数据(0xAA995566)。</p><h3 id="阶段5-设备ID检测"><a href="#阶段5-设备ID检测" class="headerlink" title="阶段5. 设备ID检测"></a>阶段5. 设备ID检测</h3><p><img src="https://s1.ax1x.com/2020/03/12/8maFeA.png" alt="8maFeA.png"><br>当找到同步头以后，需要判断ID后才能加载后面的位流，这样可以避免器件不匹配的错误。7系列的ID格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vvvv:fffffff:aaaaaaaaa:ccccccccccc1</span><br><span class="line"></span><br><span class="line">v: 4bit, version</span><br><span class="line">f: 7bit, family code</span><br><span class="line">a: 9bit, array code(4bit sub-family and 5bit device code)</span><br><span class="line">c: company code</span><br></pre></td></tr></table></figure><h3 id="阶段6-加载配置位流"><a href="#阶段6-加载配置位流" class="headerlink" title="阶段6. 加载配置位流"></a>阶段6. 加载配置位流</h3><p><img src="https://s1.ax1x.com/2020/03/12/8mdM9K.png" alt="8mdM9K.png"><br>经过上述的同步字、ID检测后，接下来就是按照数据帧配置FPGA了。具体帧结构，等后面有时间写另外一篇博文来说明。</p><h3 id="阶段7-CRC校验"><a href="#阶段7-CRC校验" class="headerlink" title="阶段7. CRC校验"></a>阶段7. CRC校验</h3><p><img src="https://s1.ax1x.com/2020/03/12/8mdf3T.png" alt="8mdf3T.png"><br>在加载数据帧时，FPGA会基于这些数据帧算出了一个CRC值，当所有的帧都加载完成以后，得到一个最终CRC，位流的尾部会有一个CRC期待值以及CRC检测指令。如果CRC检测不一致，FPGA会拉低INIT_B信号以表示CRC错误，然后中断配置流程。</p><h3 id="阶段8-启动序列"><a href="#阶段8-启动序列" class="headerlink" title="阶段8. 启动序列"></a>阶段8. 启动序列</h3><p><img src="https://s1.ax1x.com/2020/03/12/8mBM90.png" alt="8mBM90.png"><br>通过前面的步骤，已经将配置位流正确的加载到了FPGA内部。这一步是FPGA的一个启动过程，又分为8个小的步骤(phases 0-7)：<br><img src="https://s1.ax1x.com/2020/03/12/8mBcEd.png" alt="8mBcEd.png"><br>当这几个步骤完成后，FPGA释放DONE信号，DONE信号由外部上拉电阻拉高。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>整体过程如下图所示：<br><img src="https://s1.ax1x.com/2020/03/12/8mDDGq.png" alt="8mDDGq.png"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;xilinx 7系列fpga配置接口有多种多样，但内部流程都是一样的，如下图所示：&lt;br&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/03/12/8mmWUs.png&quot; alt=&quot;8mmWUs.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设备上电&lt;/li&gt;
&lt;li&gt;清除配置&lt;/li&gt;
&lt;li&gt;采样配置模式&lt;/li&gt;
&lt;li&gt;查找同步&lt;/li&gt;
&lt;li&gt;设备ID检测&lt;/li&gt;
&lt;li&gt;加载配置位流&lt;/li&gt;
&lt;li&gt;CRC校验&lt;/li&gt;
&lt;li&gt;启动序列
    
    </summary>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/categories/XILINX/"/>
    
      <category term="Xilinx 7系列配置" scheme="https://www.cdutcl.com/categories/XILINX/Xilinx-7%E7%B3%BB%E5%88%97%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/tags/XILINX/"/>
    
  </entry>
  
  <entry>
    <title>(Xilinx-7系配置3) bit swapping功能描述</title>
    <link href="https://www.cdutcl.com/posts/2cc4f630/"/>
    <id>https://www.cdutcl.com/posts/2cc4f630/</id>
    <published>2018-04-13T09:58:59.000Z</published>
    <updated>2020-03-14T13:06:01.444Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要描述xilinx 7系列位流中，bit位交换的功能。</p><a id="more"></a><h2 id="1、位交换功能"><a href="#1、位交换功能" class="headerlink" title="1、位交换功能"></a>1、位交换功能</h2><p>xilinx位交换功能，主要是用在生成并行PROM配置文件的时候使用。生成spi的配置文件时，是不需要该功能的，而生成并行MCS时，默认是打开该功能的。</p><h2 id="2、功能详细描述"><a href="#2、功能详细描述" class="headerlink" title="2、功能详细描述"></a>2、功能详细描述</h2><p>位交换功能仅仅对字节操作，仅仅将byte数据高低位颠倒，如图所示：<br><img src="https://s1.ax1x.com/2020/03/12/8m9Mb6.png" alt="8m9Mb6.png"></p><h2 id="3、数据配置"><a href="#3、数据配置" class="headerlink" title="3、数据配置"></a>3、数据配置</h2><h3 id="3-1、8位并行模式"><a href="#3-1、8位并行模式" class="headerlink" title="3.1、8位并行模式"></a>3.1、8位并行模式</h3><p>拿同步字来举例，生成的bit位流中，原始同步数据和swap后数据如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AA 99 55 66  </span><br><span class="line"> |  |  |  |</span><br><span class="line"> V  V  V  V</span><br><span class="line">55 99 AA 66</span><br></pre></td></tr></table></figure><p>假设配置总线是D[7:0]，按字节将数据传递到总线中，比如: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AA(10101010) &#x3D;&gt; 字节的MSB接D0 &#x3D;&gt; D[0:7](10101010) &#x3D;&gt; D[7:0](01010101)55</span><br></pre></td></tr></table></figure><p>所以，我们本来是要传递数据AA，到D[7:0]总线上数据变成了55。</p><h3 id="3-2、16位并行模式"><a href="#3-2、16位并行模式" class="headerlink" title="3.2、16位并行模式"></a>3.2、16位并行模式</h3><p>基于上述的8位模式，如果总线是16位，那么每个周期就传递2个字节，这里的规则是，先来的字节放在高位，流程如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-&gt; AA -&gt; 99 -&gt; 55 -&gt; 66 -&gt;</span><br><span class="line">        |||||</span><br><span class="line">        VVVVV</span><br><span class="line">-&gt; 55 -&gt; 99 -&gt; AA -&gt; 66 -&gt;</span><br><span class="line">        |||||</span><br><span class="line">        VVVVV</span><br><span class="line">-&gt; 5599 -&gt; AA66 -&gt;</span><br></pre></td></tr></table></figure><p>所以，16位总线D[15:0]上数据流就是：5599 -&gt; AA66  </p><h3 id="3-3、32位并行模式"><a href="#3-3、32位并行模式" class="headerlink" title="3.3、32位并行模式"></a>3.3、32位并行模式</h3><p>有了上述16位总线的规律，这个32位就好理解了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-&gt; AA -&gt; 99 -&gt; 55 -&gt; 66 -&gt;</span><br><span class="line">        |||||</span><br><span class="line">        VVVVV</span><br><span class="line">-&gt; 55 -&gt; 99 -&gt; AA -&gt; 66 -&gt;</span><br><span class="line">        |||||</span><br><span class="line">        VVVVV</span><br><span class="line">-&gt; 5599AA66 -&gt;</span><br></pre></td></tr></table></figure><p>所以，32位总线D[31:0]上数据流就是：5599AA66  </p><h2 id="4、软件配置"><a href="#4、软件配置" class="headerlink" title="4、软件配置"></a>4、软件配置</h2><p>有了上述原理，我们就可以通过CPU读取BIN文件，然后通过并口配置fpga。<br>这里就可以根据CPU取数的大小端方式，然后按照顺序配置FPGA即可。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要描述xilinx 7系列位流中，bit位交换的功能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/categories/XILINX/"/>
    
      <category term="Xilinx 7系列配置" scheme="https://www.cdutcl.com/categories/XILINX/Xilinx-7%E7%B3%BB%E5%88%97%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/tags/XILINX/"/>
    
  </entry>
  
  <entry>
    <title>(Xilinx-7系配置2) 位流位宽检测机理</title>
    <link href="https://www.cdutcl.com/posts/60ffd69e/"/>
    <id>https://www.cdutcl.com/posts/60ffd69e/</id>
    <published>2018-04-12T12:49:06.000Z</published>
    <updated>2020-03-14T13:05:48.173Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍xilinx7系列在上电加载时，对总线位宽自动检测的机制。</p><a id="more"></a><h2 id="位宽检测"><a href="#位宽检测" class="headerlink" title="位宽检测"></a>位宽检测</h2><p>每个位流的头部，都有一个用于位宽检测的数据，在并行配置模式时，自动检测总线位宽。<br>检测机理如下：<br><img src="https://s1.ax1x.com/2020/03/12/8ZMWQK.png" alt="8ZMWQK.png"><br>如上图所示：<br>上面8个字节数据就是用于检测总线宽度，FPGA内部仅仅判断低8位数据，当发现BB开始判断位宽，根据后面数据是啥，就知道当前总线宽度了：</p><h3 id="1-8位模式判断"><a href="#1-8位模式判断" class="headerlink" title="1. 8位模式判断"></a>1. 8位模式判断</h3><p>数据按字节输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00-&gt;00-&gt;00-&gt;BB-&gt;11-&gt;22-&gt;00-&gt;44-&gt;</span><br></pre></td></tr></table></figure><p>判断到BB后紧跟着11，说明总线是8位宽度；</p><h3 id="2-16位模式判断"><a href="#2-16位模式判断" class="headerlink" title="2. 16位模式判断"></a>2. 16位模式判断</h3><p>数据按双字节输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000-&gt;00BB-&gt;1122-&gt;0044-&gt;</span><br></pre></td></tr></table></figure><p>低8位中，BB后紧跟着22，说明总线是16位宽度；</p><h3 id="3-32位模式判断"><a href="#3-32位模式判断" class="headerlink" title="3. 32位模式判断"></a>3. 32位模式判断</h3><p>数据按四字节输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">000000BB-&gt;11220044-&gt;</span><br></pre></td></tr></table></figure><p>低8位中，BB后紧跟着44，说明总线是32位宽度；</p><p>根据如上机理，即可判断总线宽度。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍xilinx7系列在上电加载时，对总线位宽自动检测的机制。&lt;/p&gt;
    
    </summary>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/categories/XILINX/"/>
    
      <category term="Xilinx 7系列配置" scheme="https://www.cdutcl.com/categories/XILINX/Xilinx-7%E7%B3%BB%E5%88%97%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/tags/XILINX/"/>
    
  </entry>
  
  <entry>
    <title>(Xilinx-7系配置1) 数据文件格式</title>
    <link href="https://www.cdutcl.com/posts/df2d2b3/"/>
    <id>https://www.cdutcl.com/posts/df2d2b3/</id>
    <published>2018-04-11T11:33:10.000Z</published>
    <updated>2020-03-14T13:05:36.919Z</updated>
    
    <content type="html"><![CDATA[<p>Xilinx的配置文件格式多种多样，bit、rbt、bin、mcs等等，本文主要介绍这些格式的文件都有什么差异，在什么场景下用什么文件。</p><a id="more"></a><h2 id="配置文件后缀"><a href="#配置文件后缀" class="headerlink" title="配置文件后缀"></a>配置文件后缀</h2><h3 id="1-bit格式"><a href="#1-bit格式" class="headerlink" title="1. bit格式"></a>1. bit格式</h3><p>默认生成文件类型，包含一些冗余的头部信息，这些头部信息是不需要下载到FPGA里面的。bit文件可以直接通过jtag加载到fpga中，掉电消失。<br><img src="https://s1.ax1x.com/2020/03/12/8ZMmGt.png" alt="8ZMmGt.png"></p><h3 id="2-rbt格式"><a href="#2-rbt格式" class="headerlink" title="2. rbt格式"></a>2. rbt格式</h3><p>在ISE中使能了-b选项、在vivado中使能了-raw_bitfile选项，就可以生成该文件，该文件内容和bit一致，只是说这个是ASCII格式，bit是bin格式。<br><img src="https://s1.ax1x.com/2020/03/12/8ZMePI.png" alt="8ZMePI.png"><br><img src="https://s1.ax1x.com/2020/03/12/8ZMVIA.png" alt="8ZMVIA.png"></p><h3 id="3-bin格式"><a href="#3-bin格式" class="headerlink" title="3. bin格式"></a>3. bin格式</h3><p>在ISE中使能了-g binary:yes选项、在vivado中使能了-bin_file选项，就可以生成该文件，该文件内容相当于bit文件剔除了头部冗余信息。后面完全一致。<br><img src="https://s1.ax1x.com/2020/03/12/8ZMAVH.png" alt="8ZMAVH.png"><br><img src="https://s1.ax1x.com/2020/03/12/8ZMEad.png" alt="8ZMEad.png"></p><h3 id="4-mcs格式"><a href="#4-mcs格式" class="headerlink" title="4. mcs格式"></a>4. mcs格式</h3><p>在vivado中，使用write_cfgmem -format mcs命令可以将bit文件转换成mcs文件，mcs文件也是ASCII格式，可以直接用文本工具打开，主要是在bin的基础上，增加了地址信息和校验信息。<br><img src="https://s1.ax1x.com/2020/03/12/8ZMnRP.png" alt="8ZMnRP.png"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Xilinx的配置文件格式多种多样，bit、rbt、bin、mcs等等，本文主要介绍这些格式的文件都有什么差异，在什么场景下用什么文件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/categories/XILINX/"/>
    
      <category term="Xilinx 7系列配置" scheme="https://www.cdutcl.com/categories/XILINX/Xilinx-7%E7%B3%BB%E5%88%97%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="XILINX" scheme="https://www.cdutcl.com/tags/XILINX/"/>
    
  </entry>
  
</feed>
